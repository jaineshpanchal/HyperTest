[
  {
    "message": "Playwright spec emitted → generated.spec.ts (resilient selectors, guards, soft URL check)",
    "artifacts": {
      "script": "generated.spec.ts",
      "content": "import { sel } from '@hypertest/runner-web';\nimport { test, expect } from '@playwright/test';\n\n/**\n * Generated by HyperTest Agent\n * Goal: Create a login test\n * Base URL: https://example.com\n *\n * Selector strategy (sel.stable):\n *  - role=<role> name=\"...\": getByRole(role, { name })\n *  - label=... / placeholder=...: getByLabel / getByPlaceholder\n *  - testid=...: [data-testid=\"...\"]\n *  - id/name/css as a last resort\n */\n\ntest.describe('HyperTest generated', () => {\n  test('smoke', async ({ page }) => {\n    test.setTimeout(90_000); // allow time for slow networks\n\n    const BASE = process.env.BASE_URL || 'https://example.com';\n\n    // Navigate with explicit timeout and early failure message\n    const resp = await page.goto(BASE, { waitUntil: 'domcontentloaded', timeout: 60_000 });\n    expect(resp, `Failed to GET ${BASE}. Check network/DNS/VPN.`).not.toBeNull();\n\n    // Helpers: short (3s) per-action timeouts and visibility guards\n    const tryFill = async (selector: string, value: string) => {\n      const loc = sel.stable(page, selector);\n      const vis = await loc.isVisible({ timeout: 3000 }).catch(() => false);\n      if (vis) await loc.fill(value, { timeout: 3000 }).catch(() => {});\n    };\n    const tryClick = async (selector: string) => {\n      const loc = sel.stable(page, selector);\n      const vis = await loc.isVisible({ timeout: 3000 }).catch(() => false);\n      if (vis) await loc.click({ timeout: 3000 }).catch(() => {});\n    };\n\n    await test.step('attempt login (skeleton; adjust selectors)', async () => {\n      // Harmless demo action on example.com; ignored if absent\n      await tryClick('role=link name=\"More information\"');\n\n      // Example login skeleton (make these match your app; env creds supported)\n      // await tryFill('label=Email', process.env.HT_USER ?? 'user@example.com');\n      // await tryFill('label=Password', process.env.HT_PASS ?? 'secret');\n      // await tryClick('role=button name=\"Sign in\"');\n    });\n\n    // Let the page settle; don’t fail the whole test if the page is already closed.\n    await page.waitForLoadState('domcontentloaded').catch(() => {});\n    if (!page.isClosed()) {\n      await expect.soft(page).toHaveURL(/https?:\\/\\/.*/, { timeout: 20_000 });\n    }\n  });\n});\n"
    }
  }
]